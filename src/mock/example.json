{
  "articleTitle": "从 Flutter 2.0 开始学 - 路由封装、界面跳转、登录注册 UI",
  "brief_content": "欢迎、引导 登录、注册 主页 Flutter 路由跳转 封装 Fluro 路由工具类 fluro 提供了对路由入栈和出栈，在跳转和返回界面也可以设置对应参数控制（动画、时间、入栈方向、是否替换/清空）",
  "articleContent": "|   欢迎、引导   |  登录、注册    |   主页   |\n| ---- | ---- | ---- |\n|\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28d5990d9adf4c55b1c0480834289eab~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" /\u003e  | \u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/831acfc7e6fa4050ab0c1001d329a39a~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" /\u003e |\u003cimg src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52acb296d08b432c9f25c6a9e3ab4631~tplv-k3u1fbpfcp-zoom-1.image\" style=\"zoom:50%;\" /\u003e|\n\n## Flutter 路由跳转\n\n\u003e 界面跳转 push 相当于是一个入栈操作\n\u003e\n\u003e 界面返回 pop 相当于是一个出栈操作\n\n![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d227ec1be1a34d5d880a4f82a70ba3eb~tplv-k3u1fbpfcp-zoom-1.image)\n\n## 封装 Fluro 路由工具类\n\n`fluro` 提供了对路由入栈和出栈，在跳转和返回界面也可以设置对应参数控制（动画、时间、入栈方向、是否替换/清空）\n\n\u003e Android  activity startActivity\n\u003e\n\u003e iOS pushViewController  popViewController\n\n### 封装 navigate_util.dart \n\n- ##### core -\u003e utils -\u003e navigate_util.dart \n\n```dart\nimport 'package:fluro/fluro.dart';\nimport 'package:moose_app/ui/routers/application.dart';\n\nclass ATHNavigator {\n  \n  // 入栈\n  static push(context, path) {\n    ATHApplication.router\n        .navigateTo(context, path, transitionDuration: Duration(seconds: 1));\n  }\n\n  // 出栈\n  static pop(context) {\n    ATHApplication.router.pop(context);\n  }\n\n  // 从右边入栈\n  static pushFromRight(context, path) {\n    ATHApplication.router\n        .navigateTo(context, path, transition: TransitionType.inFromRight);\n  }\n\n  // 1s 从右边入栈\n  static pushFromRightDuration(context, path) {\n    ATHApplication.router.navigateTo(context, path,\n        transition: TransitionType.inFromRight,\n        transitionDuration: Duration(seconds: 1));\n  }\n\n  // 入栈 谈入动画\n  static pushFadeIn(context, path) {\n    ATHApplication.router.navigateTo(context, path,\n        transition: TransitionType.fadeIn,\n        transitionDuration: Duration(seconds: 1));\n  }\n\n  // 入栈替换，clearStack 是否清空栈\n  static pushReplace(context, path, {clearStack: false}) {\n    ATHApplication.router.navigateTo(context, path,\n        replace: true,\n        clearStack: clearStack,\n        transition: TransitionType.fadeIn,\n        transitionDuration: Duration(seconds: 0));\n  }\n\n  // 入栈替换 谈入\n  static pushFadeInReplace(context, path) {\n    ATHApplication.router.navigateTo(context, path,\n        replace: true,\n        transition: TransitionType.fadeIn,\n        transitionDuration: Duration(seconds: 0));\n  }\n}\n```\n\n## 登录界面\n\n- 创建登录界面\n\n  - #### lib/ui/screens/login\n\n### ATHLoginScreen\n\n-  login_screen.dart\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'login_body.dart';\nclass ATHLoginScreen extends StatelessWidget {\n  static final String routeName = \"app://login\";\n  ATHLoginScreen({Key key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    // flutter material 自带脚手架\n    return Scaffold(\n      body: ATHLoginBody(),\n    );\n  }\n}\n```\n\n\u003e Scaffold Flutter 自带组件，可以设置 appBar、floatingActionButton、drawer ...，用于快速构建展示视图\n\n### ATHLoginBody\n\n- login_body.dart\n\n```dart\n....\n  \nimport 'login_background.dart';\n\nclass ATHLoginBody extends StatefulWidget {\n  ATHLoginBody({Key key}) : super(key: key);\n\n  @override\n  _LoginBodyState createState() =\u003e _LoginBodyState();\n}\n\nclass _LoginBodyState extends State\u003cATHLoginBody\u003e {\n  final TextEditingController _usernameController = TextEditingController();\n  final TextEditingController _passwordController = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    _usernameController.text = \"江景\";\n    _passwordController.text = \"123\";\n  }\n\n  void _onLoginButtonPressed() async {\n    ATHNavigator.pushReplace(context, ATHMainScreen.routeName,\n        clearStack: true);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GestureDetector(\n        onTap: () {\n          ATHFocusUtil.requestFocus(context);\n        },\n        child: ATHLoginBackground(\n          child: SingleChildScrollView(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: \u003cWidget\u003e[\n                Image.asset(\n                  'assets/images/login.png',\n                  height: 400.h,\n                ),\n                ATHAuthAccountInput(\n                  hintText: \"账号\",\n                  controller: _usernameController,\n                  // onChanged: (value) =\u003e {print('$value')},\n                ),\n                ATHAuthPasswordInput(\n                  hintText: \"密码\",\n                  controller: _passwordController,\n                  // onChanged: (value) =\u003e {},\n                ),\n                ATHAuthButton(\n                  text: \"登录\",\n                  press: () {\n                    ATHFocusUtil.requestFocus(context);\n                    _onLoginButtonPressed();\n                  },\n                ),\n                ATHUserAlready(\n                  login: true,\n                  press: () {\n                    ATHNavigator.pushReplace(\n                        context, ATHRegisterScreen.routeName);\n                  },\n                ),\n              ],\n            ),\n          ),\n        ));\n  }\n}\n```\n\n\u003e GestureDetector ： Flutter 中手势事件\n\u003e\n\u003e TextEditingController ： 文本编辑控制器，可以监听文本框改变\n\u003e\n\u003e ATHFocusUtil ： 获取焦点工具类\n\u003e\n\u003e SingleChildScrollView ：Flutter 组件单个子组件滚动容器\n\n### ATHLoginBackground\n\n- login_background.dart\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass ATHLoginBackground extends StatelessWidget {\n  final Widget child;\n\n  const ATHLoginBackground({Key key, @required this.child}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    Size size = MediaQuery.of(context).size;\n    return Container(\n      height: size.height,\n      width: double.infinity,\n      child: Stack(\n        alignment: Alignment.center,\n        children: \u003cWidget\u003e[\n          child,\n        ],\n      ),\n    );\n  }\n}\n```\n\n\u003e Container: Flutter 容器组件\n\u003e\n\u003e MediaQuery.of(context).size 获取屏幕尺寸\n\u003e\n\u003e Stack：容器组件，可以根据 Position 放置不同位置子组件\n\n## 注册界面\n\n和登录界面基本一致，只需要把封装好的容器一个个按照顺序摆放就行"
}
